= Webtoon API

[link=https://codecov.io/gh/depromeet/webtoon]
image::https://codecov.io/gh/depromeet/webtoon/branch/develop/graph/badge.svg?token=XWKIXG9PRT[]

== 도메인 정의

=== 웹툰(Webtoon)
속성::
* 제목
* 플랫폼사이트 + URL
* 작가
* 연재 요일
* 요일별 인기도
* 썸네일
* 요약
* 점수(플랫폼)
* 장르

책임::
* [x] 요일별 웹툰리스트를 반환할 수 있다.
* [x] 검색 키워드로 웹툰 / 작가를 찾을수 있다.
* [x] 장르별로 웹툰을 찾을 수 있다.
* [x] 작가별로 웹툰을 찾을 수 있다.
* [x] 크롤링을 통해서 웹툰데이터가 저장된다.

=== 작가(Author)

속성::
* 작가명

책임::
* [x] 웹툰과 연관관계를 가진다.

=== 평점(Rating)
-> 자체 평점으로, 웹툰의 점수는 플랫폼와는 다르다.
속성::
* 스토리점수
* 작화점수
* 사용자 정보
* 웹툰ID

책임::
* [x] 사용자는 각 웹툰별로 스토리 / 작화점수를 매길수 있다.
* [x] 웹툰을 기준으로 스토리/작화/종합점수의 평균을 반환한다.

=== 댓글(Comment)

속성::
* 컨텐트 (댓글내용)
* 사용자정보
* 웹툰ID

책임::
* [x] 사용자는 댓글을 남기고, 수정 및 삭제가 가능하다.

=== 사용자(Account)

속성::
* 닉네임
* Firebase anonymous 토큰
* 프로필 이미지

책임::
* [x] 사용자 식별이 가능하다.

== 사용기술
Project Architecture::
admin, api, batch, common, core, crawler 총 6개의 모듈로 프로젝트를 구성하였고,
API 서버, Batch 서버, Admin 서버 로 구성된 MSA 구조입니다.

Data Collection::
*_Web Crawling_*, *_Spring batch_*, *_Scheduler_* 등의 기술을 이용해 네이버, 다음에서 연재중인 웹툰 데이터를 지속적으로 업데이트 받고 가공하여 사용합니다.

API Server::
* API 서버는 Servlet 기반의 *_SpringMVC_* 를 사용하여 개발하였고, *_Swagger2_* 를 활용해 API 문서를 작성 및 공유 하였습니다.
서버 배포는 *_AWS EC2_* 에 배포하였습니다.

Data Persistence::
* RDB 인 *_MariaDB_* 를 사용하여 데이터를 영속화합니다. 이 과정에서 자바 표준 ORM 인 *_JPA_* 를 사용하였고, 동적쿼리를 원활히 작성하기 위해 *_QueryDSL_* 를 사용하였습니다.

Configuration management::
* Git & Github 을 활용해 소스코드의 형상관리를 하였습니다. *_Git-Flow_* 전략을 사용하여 원활한 협업이 이루어졌고, Slack 을 활용해 지속적으로 커뮤니케이션 하였습니다.

CI/CD::
*_Github Action_* 을 활용하였습니다.

Language::
*_kotlin_* 을 사용하였습니다.












